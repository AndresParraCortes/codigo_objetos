{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AndresParraCortes/codigo_objetos/blob/main/codigo%20logaritmo%20dijkstra\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import heapq\n",
        "\n",
        "# Grafo definido como diccionario: Nodo -> [(Nodo vecino, peso)]\n",
        "grafo = {\n",
        "    \"Casita\": [(\"Librería Gauss\", 180), (\"Librería Fibonacci\", 345), (\"Librería Fahrenheit\", 314)],\n",
        "    \"Librería Gauss\": [(\"Librería Euler\", 230), (\"Librería Richter\", 198), (\"Casita\", 180)],\n",
        "    \"Librería Fahrenheit\": [(\"Casita\", 314), (\"Librería Celsius\", 255), (\"Librería Fibonacci\", 450)],\n",
        "    \"Librería Fibonacci\": [(\"Casita\", 345), (\"Librería Fahrenheit\", 450), (\"Librería Hilbert\", 250)],\n",
        "    \"Librería Hilbert\": [(\"Librería Fibonacci\", 250), (\"Librería Celsius\", 312)],\n",
        "    \"Librería Celsius\": [(\"Librería Fahrenheit\", 255), (\"Librería Hilbert\", 312)],\n",
        "    \"Librería Euler\": [(\"Librería Gauss\", 230), (\"Librería Voronoi\", 317), (\"Librería Königsberg\", 300)],\n",
        "    \"Librería Voronoi\": [(\"Librería Euler\", 317), (\"Librería Garder\", 170), (\"Librería Gauss\", 190)],\n",
        "    \"Librería Garder\": [(\"Librería Voronoi\", 170), (\"Librería Fibonacci\", 310)],\n",
        "    \"Librería Richter\": [(\"Librería Gauss\", 198), (\"Librería Celsius\", 267)],\n",
        "    \"Librería Königsberg\": [(\"Librería Euler\", 300)]  # Nodo agregado explícitamente\n",
        "}\n",
        "\n",
        "# Generar la matriz de adyacencia\n",
        "def generar_matriz_adyacencia(grafo):\n",
        "    nodos = list(grafo.keys())  # Lista de nodos en el grafo\n",
        "    n = len(nodos)\n",
        "    matriz = np.zeros((n, n), dtype=int)\n",
        "\n",
        "    for i, nodo in enumerate(nodos):\n",
        "        for vecino, peso in grafo[nodo]:\n",
        "            if vecino in nodos:  # Verificar que el vecino esté en la lista de nodos\n",
        "                j = nodos.index(vecino)\n",
        "                matriz[i][j] = peso\n",
        "\n",
        "    return matriz, nodos\n",
        "\n",
        "# Generar la matriz de incidencia\n",
        "def generar_matriz_incidencia(grafo):\n",
        "    nodos = list(grafo.keys())\n",
        "    aristas = []\n",
        "\n",
        "    # Crear una lista única de aristas\n",
        "    for nodo in grafo:\n",
        "        for vecino, peso in grafo[nodo]:\n",
        "            if (nodo, vecino) not in aristas and (vecino, nodo) not in aristas:\n",
        "                aristas.append((nodo, vecino, peso))\n",
        "\n",
        "    m = len(aristas)  # Número de aristas\n",
        "    n = len(nodos)    # Número de nodos\n",
        "    matriz = np.zeros((n, m), dtype=int)\n",
        "\n",
        "    for k, (origen, destino, peso) in enumerate(aristas):\n",
        "        if origen in nodos and destino in nodos:  # Verificar que los nodos estén en la lista\n",
        "            i = nodos.index(origen)\n",
        "            j = nodos.index(destino)\n",
        "            matriz[i][k] = 1  # Nodo origen\n",
        "            matriz[j][k] = -1  # Nodo destino\n",
        "\n",
        "    return matriz, nodos, aristas\n",
        "\n",
        "# Algoritmo de Dijkstra\n",
        "def dijkstra(grafo, inicio, destino):\n",
        "    cola = [(0, inicio)]  # Cola de prioridad\n",
        "    distancias = {nodo: float('inf') for nodo in grafo}\n",
        "    distancias[inicio] = 0\n",
        "    camino = {}\n",
        "\n",
        "    while cola:\n",
        "        dist_actual, nodo_actual = heapq.heappop(cola)\n",
        "\n",
        "        if nodo_actual == destino:\n",
        "            break\n",
        "\n",
        "        for vecino, peso in grafo[nodo_actual]:\n",
        "            nueva_dist = dist_actual + peso\n",
        "            if nueva_dist < distancias[vecino]:\n",
        "                distancias[vecino] = nueva_dist\n",
        "                heapq.heappush(cola, (nueva_dist, vecino))\n",
        "                camino[vecino] = nodo_actual\n",
        "\n",
        "    # Reconstruir el camino más corto\n",
        "    nodo = destino\n",
        "    ruta = []\n",
        "    while nodo != inicio:\n",
        "        ruta.append(nodo)\n",
        "        nodo = camino[nodo]\n",
        "    ruta.append(inicio)\n",
        "    ruta.reverse()\n",
        "\n",
        "    return ruta, distancias[destino]\n",
        "\n",
        "# Ejecutar las funciones\n",
        "matriz_adyacencia, nodos = generar_matriz_adyacencia(grafo)\n",
        "print(\"Matriz de Adyacencia:\")\n",
        "print(matriz_adyacencia)\n",
        "\n",
        "matriz_incidencia, nodos, aristas = generar_matriz_incidencia(grafo)\n",
        "print(\"\\nMatriz de Incidencia:\")\n",
        "print(matriz_incidencia)\n",
        "\n",
        "# Encontrar el camino más corto con Dijkstra\n",
        "ruta, distancia = dijkstra(grafo, \"Casita\", \"Librería Celsius\")\n",
        "print(f\"\\nEl camino más corto de Casita a Librería Celsius es: {ruta} con una distancia de {distancia}\")\n"
      ],
      "metadata": {
        "id": "e1g7rp3LFIs0",
        "outputId": "20986de0-c2a8-4f8e-e32e-2dfc0256e524",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz de Adyacencia:\n",
            "[[  0 180 314 345   0   0   0   0   0   0   0]\n",
            " [180   0   0   0   0   0 230   0   0 198   0]\n",
            " [314   0   0 450   0 255   0   0   0   0   0]\n",
            " [345   0 450   0 250   0   0   0   0   0   0]\n",
            " [  0   0   0 250   0 312   0   0   0   0   0]\n",
            " [  0   0 255   0 312   0   0   0   0   0   0]\n",
            " [  0 230   0   0   0   0   0 317   0   0 300]\n",
            " [  0 190   0   0   0   0 317   0 170   0   0]\n",
            " [  0   0   0 310   0   0   0 170   0   0   0]\n",
            " [  0 198   0   0   0 267   0   0   0   0   0]\n",
            " [  0   0   0   0   0   0 300   0   0   0   0]]\n",
            "\n",
            "Matriz de Incidencia:\n",
            "[[ 1  1  1  0  0 -1 -1  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
            "   0  0  0]\n",
            " [-1  0  0  1  1  1  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0 -1  0  0\n",
            "  -1  0  0]\n",
            " [ 0  0 -1  0  0  0  1  1  1  0 -1  0  0  0 -1  0  0  0  0  0  0  0  0  0\n",
            "   0  0  0]\n",
            " [ 0 -1  0  0  0  0  0  0 -1  1  1  1 -1  0  0  0  0  0  0  0  0  0  0 -1\n",
            "   0  0  0]\n",
            " [ 0  0  0  0  0  0  0  0  0  0  0 -1  1  1  0 -1  0  0  0  0  0  0  0  0\n",
            "   0  0  0]\n",
            " [ 0  0  0  0  0  0  0 -1  0  0  0  0  0 -1  1  1  0  0  0  0  0  0  0  0\n",
            "   0 -1  0]\n",
            " [ 0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1 -1  0  0  0  0\n",
            "   0  0 -1]\n",
            " [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  1  1  1 -1  0\n",
            "   0  0  0]\n",
            " [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  1  1\n",
            "   0  0  0]\n",
            " [ 0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
            "   1  1  0]\n",
            " [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0\n",
            "   0  0  1]]\n",
            "\n",
            "El camino más corto de Casita a Librería Celsius es: ['Casita', 'Librería Fahrenheit', 'Librería Celsius'] con una distancia de 569\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}